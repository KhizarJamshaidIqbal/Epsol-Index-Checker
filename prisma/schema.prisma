// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  campaigns     Campaign[]
  settings      Setting?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Setting {
  id        String   @id @default(cuid())
  userId    String   @unique
  googleKey String? // encrypted at rest
  googleCx  String? // encrypted at rest
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id        String         @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime       @default(now())
  status    CampaignStatus @default(READY)
  items     UrlItem[]
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum CampaignStatus {
  READY
  RUNNING
  COMPLETE
}

model UrlItem {
  id         String    @id @default(cuid())
  campaignId String
  url        String
  status     UrlStatus @default(NOT_FETCHED)
  title      String?
  snippet    String?
  reason     String? // e.g., "Not found in Google" or error message
  checkedAt  DateTime?
  createdAt  DateTime  @default(now())
  campaign   Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@unique([campaignId, url])
  @@index([campaignId, status])
}

enum UrlStatus {
  NOT_FETCHED
  INDEXED
  NOT_INDEXED
  ERROR
}
